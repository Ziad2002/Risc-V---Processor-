$date
	Wed Feb 12 14:36:48 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb $end
$var wire 1 ! halt $end
$var reg 1 " clk $end
$var reg 32 # end_time [31:0] $end
$var reg 1 $ exit $end
$var reg 640 % mem_in_fname [639:0] $end
$var reg 640 & mem_out_fname [639:0] $end
$var reg 640 ' regs_in_fname [639:0] $end
$var reg 6400 ( regs_inv_fname [6399:0] $end
$var reg 640 ) regs_out_fname [639:0] $end
$var reg 6400 * regs_outv_fname [6399:0] $end
$var reg 1 + rst $end
$var reg 640 , signal_dump_fname [639:0] $end
$var reg 32 - start_time [31:0] $end
$scope module CPU $end
$var wire 1 " clk $end
$var wire 1 + rst $end
$var wire 1 . zero $end
$var wire 7 / opcode [6:0] $end
$var wire 1 0 loadv $end
$var wire 32 1 instruction [31:0] $end
$var wire 32 2 imm [31:0] $end
$var wire 1 ! halt $end
$var wire 7 3 fun7 [6:0] $end
$var wire 3 4 fun3 [2:0] $end
$var wire 2 5 elem [1:0] $end
$var wire 128 6 data2V [127:0] $end
$var wire 32 7 data2 [31:0] $end
$var wire 128 8 data1V [127:0] $end
$var wire 32 9 data1 [31:0] $end
$var wire 1 : and_out $end
$var wire 32 ; WriteData [31:0] $end
$var wire 32 < Sum_out [31:0] $end
$var wire 5 = Rs2 [4:0] $end
$var wire 5 > Rs1 [4:0] $end
$var wire 1 ? RegWriteV $end
$var wire 1 @ RegWrite $end
$var wire 32 A ReadData [31:0] $end
$var wire 5 B Rd [4:0] $end
$var wire 32 C PC_in [31:0] $end
$var wire 32 D PC_Plus_4 [31:0] $end
$var wire 32 E PC [31:0] $end
$var wire 32 F Mux_out [31:0] $end
$var wire 1 G MemtoReg $end
$var wire 1 H MemWrite $end
$var wire 1 I MemRead $end
$var wire 4 J Control_out [3:0] $end
$var wire 1 K Branch $end
$var wire 128 L ALU_ResultV [127:0] $end
$var wire 32 M ALU_Result [31:0] $end
$var wire 1 N ALUSrc $end
$scope module ALU $end
$var wire 4 O Control_in [3:0] $end
$var wire 32 P B [31:0] $end
$var wire 32 Q A [31:0] $end
$var reg 32 R ALU_Result [31:0] $end
$var reg 1 . zero $end
$upscope $end
$scope module ALUC $end
$var wire 3 S fun3 [2:0] $end
$var wire 7 T fun7 [6:0] $end
$var wire 7 U opcode [6:0] $end
$var reg 4 V Control_out [3:0] $end
$upscope $end
$scope module ALUV $end
$var wire 4 W Control_in [3:0] $end
$var wire 32 X sub_result_3 [31:0] $end
$var wire 32 Y sub_result_2 [31:0] $end
$var wire 32 Z sub_result_1 [31:0] $end
$var wire 32 [ sub_result_0 [31:0] $end
$var wire 32 \ mul_result_3 [31:0] $end
$var wire 32 ] mul_result_2 [31:0] $end
$var wire 32 ^ mul_result_1 [31:0] $end
$var wire 32 _ mul_result_0 [31:0] $end
$var wire 32 ` div_result_3 [31:0] $end
$var wire 32 a div_result_2 [31:0] $end
$var wire 32 b div_result_1 [31:0] $end
$var wire 32 c div_result_0 [31:0] $end
$var wire 32 d add_result_3 [31:0] $end
$var wire 32 e add_result_2 [31:0] $end
$var wire 32 f add_result_1 [31:0] $end
$var wire 32 g add_result_0 [31:0] $end
$var wire 128 h B [127:0] $end
$var wire 128 i A [127:0] $end
$var reg 128 j ALU_ResultV [127:0] $end
$upscope $end
$scope module ALU_mux $end
$var wire 1 N sel $end
$var wire 32 k Mux_out [31:0] $end
$var wire 32 l B [31:0] $end
$var wire 32 m A [31:0] $end
$upscope $end
$scope module Adder $end
$var wire 32 n in_2 [31:0] $end
$var wire 32 o in_1 [31:0] $end
$var wire 32 p Sum_out [31:0] $end
$upscope $end
$scope module And $end
$var wire 1 : and_out $end
$var wire 1 . zero $end
$var wire 1 K branch $end
$upscope $end
$scope module Control $end
$var wire 7 q opcode [6:0] $end
$var reg 1 N ALUSrc $end
$var reg 1 K Branch $end
$var reg 1 I MemRead $end
$var reg 1 H MemWrite $end
$var reg 1 G MemtoReg $end
$var reg 1 @ RegWrite $end
$var reg 1 ? RegWriteV $end
$var reg 1 0 loadv $end
$upscope $end
$scope module ImmGen $end
$var wire 7 r opcode [6:0] $end
$var wire 32 s instruction [31:0] $end
$var reg 32 t immExt [31:0] $end
$upscope $end
$scope module InstMem $end
$var wire 32 u InstAddr [31:0] $end
$var wire 1 " clk $end
$var wire 32 v read_addresss [31:0] $end
$var wire 32 w instruction_out [31:0] $end
$upscope $end
$scope module Mem $end
$var wire 32 x DataAddr [31:0] $end
$var wire 32 y DataAddrW [31:0] $end
$var wire 1 I MemRead $end
$var wire 1 H MemWrite $end
$var wire 1 " clk $end
$var wire 32 z WriteData [31:0] $end
$var wire 32 { ReadData [31:0] $end
$upscope $end
$scope module Mem_Mux $end
$var wire 32 | A3 [31:0] $end
$var wire 32 } B3 [31:0] $end
$var wire 1 G sel3 $end
$var wire 32 ~ Mux_out3 [31:0] $end
$upscope $end
$scope module P $end
$var wire 1 !" WE $end
$var wire 1 " clk $end
$var wire 1 + rst $end
$var wire 32 "" PC_in [31:0] $end
$var reg 32 #" PC_out [31:0] $end
$upscope $end
$scope module PC_Mux $end
$var wire 32 $" B2 [31:0] $end
$var wire 1 : sel2 $end
$var wire 32 %" Mux_out2 [31:0] $end
$var wire 32 &" A2 [31:0] $end
$upscope $end
$scope module PCplus $end
$var wire 32 '" PC [31:0] $end
$var wire 32 (" PC_Plus_4 [31:0] $end
$upscope $end
$scope module Registers $end
$var wire 5 )" Rd [4:0] $end
$var wire 1 @ RegWrite $end
$var wire 5 *" Rs1 [4:0] $end
$var wire 5 +" Rs2 [4:0] $end
$var wire 32 ," Write_data [31:0] $end
$var wire 1 " clk $end
$var wire 32 -" read_data2 [31:0] $end
$var wire 32 ." read_data1 [31:0] $end
$upscope $end
$scope module RegistersV $end
$var wire 5 /" Rd [4:0] $end
$var wire 1 ? RegWriteV $end
$var wire 5 0" Rs1 [4:0] $end
$var wire 5 1" Rs2 [4:0] $end
$var wire 128 2" Write_dataV [127:0] $end
$var wire 1 " clk $end
$var wire 2 3" elem [1:0] $end
$var wire 32 4" imm [31:0] $end
$var wire 1 0 loadv $end
$var wire 128 5" read_data2V [127:0] $end
$var wire 128 6" read_data1V [127:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10000000000000000000000000000000010000000000000000000000000000001100000000000000000000000000000010 6"
b110000000000000000000000000000001010000000000000000000000000000001000000000000000000000000000000100 5"
b0 4"
b10 3"
b1100000000000000000000000000000001010000000000000000000000000000011000000000000000000000000000001000 2"
b11 1"
b10 0"
b1 /"
b100 ."
b100 -"
b0 ,"
b11 +"
b10 *"
b1 )"
b100 ("
b0 '"
b100 &"
b100 %"
b0 $"
b0 #"
b100 ""
1!"
b0 ~
b0 }
b0 |
b0 {
b100 z
b0 y
b0 x
b1100010001000011001100 w
b0 v
b0 u
b0 t
b1100010001000011001100 s
b1001100 r
b1001100 q
b0 p
b0 o
b0 n
b100 m
b0 l
b100 k
b1100000000000000000000000000000001010000000000000000000000000000011000000000000000000000000000001000 j
b10000000000000000000000000000000010000000000000000000000000000001100000000000000000000000000000010 i
b110000000000000000000000000000001010000000000000000000000000000001000000000000000000000000000000100 h
b110 g
b101 f
b110 e
b1000 d
b0 c
b1 b
b0 a
b0 `
b1000 _
b110 ^
b101 ]
b1100 \
b11111111111111111111111111111110 [
b1 Z
b11111111111111111111111111111100 Y
b11111111111111111111111111111100 X
b1010 W
b1010 V
b1001100 U
b0 T
b1 S
b0 R
b100 Q
b100 P
b1010 O
0N
b0 M
b1100000000000000000000000000000001010000000000000000000000000000011000000000000000000000000000001000 L
0K
b1010 J
0I
0H
0G
b100 F
b0 E
b100 D
b100 C
b1 B
b0 A
0@
1?
b10 >
b11 =
b0 <
b0 ;
0:
b100 9
b10000000000000000000000000000000010000000000000000000000000000001100000000000000000000000000000010 8
b100 7
b110000000000000000000000000000001010000000000000000000000000000001000000000000000000000000000000100 6
b10 5
b1 4
b0 3
b0 2
b1100010001000011001100 1
00
b1001100 /
0.
b0 -
b1110011011010010110111001100111011011000110010100101110011101100110001101100100 ,
1+
b1110010011001010110011101110011010111110110111101110101011101000111011000101110011010000110010101111000 *
b11100100110010101100111011100110101111101101111011101010111010000101110011010000110010101111000 )
b11100100110010101100111011100110101111101101001011011100111011000101110011010000110010101111000 (
b111001001100101011001110111001101011111011010010110111000101110011010000110010101111000 '
b110110101100101011011010101111101101111011101010111010000101110011010000110010101111000 &
b1101101011001010110110101011111011010010110111000101110011010000110010101111000 %
0$
bx #
0"
0!
$end
#5000
1"
#10000
0?
b0 b
b0 L
b0 j
b0 2"
b0 F
b0 P
b0 k
b0 \
b0 ]
b0 ^
b0 _
b0 X
b0 Y
b0 Z
b0 [
b0 d
b0 e
b0 f
b0 g
b0 7
b0 m
b0 z
b0 -"
b0 6
b0 h
b0 5"
b0 9
b0 Q
b0 ."
b0 8
b0 i
b0 6"
1!
b0 =
b0 +"
b0 1"
b0 5
b0 3"
b0 >
b0 *"
b0 0"
b0 4
b0 S
b0 /
b0 U
b0 q
b0 r
b0 B
b0 )"
b0 /"
b1000 C
b1000 ""
b1000 %"
b0 1
b0 s
b0 w
b100 u
b1000 D
b1000 &"
b1000 ("
b100 <
b100 p
b100 $"
b100 E
b100 o
b100 v
b100 #"
b100 '"
0"
#15000
1"
#20000
b1100 C
b1100 ""
b1100 %"
b1000 u
b1100 D
b1100 &"
b1100 ("
b1000 <
b1000 p
b1000 $"
b1000 E
b1000 o
b1000 v
b1000 #"
b1000 '"
b10100 #
1$
0"
