$date
	Sat Feb  8 02:50:09 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb $end
$var wire 1 ! halt $end
$var reg 1 " clk $end
$var reg 1 # exit $end
$var reg 640 $ mem_in_fname [639:0] $end
$var reg 640 % mem_out_fname [639:0] $end
$var reg 640 & regs_in_fname [639:0] $end
$var reg 640 ' regs_out_fname [639:0] $end
$var reg 1 ( rst $end
$var reg 640 ) signal_dump_fname [639:0] $end
$scope module CPU $end
$var wire 1 " clk $end
$var wire 1 ( reset $end
$var wire 1 * zero $end
$var wire 7 + opcode [6:0] $end
$var wire 32 , instruction [31:0] $end
$var wire 32 - imm [31:0] $end
$var wire 1 ! halt $end
$var wire 7 . fun7 [6:0] $end
$var wire 3 / fun3 [2:0] $end
$var wire 32 0 data2 [31:0] $end
$var wire 32 1 data1 [31:0] $end
$var wire 1 2 and_out $end
$var wire 32 3 WriteData [31:0] $end
$var wire 32 4 Sum_out [31:0] $end
$var wire 5 5 Rs2 [4:0] $end
$var wire 5 6 Rs1 [4:0] $end
$var wire 1 7 RegWrite $end
$var wire 32 8 ReadData [31:0] $end
$var wire 5 9 Rd [4:0] $end
$var wire 32 : PC_in [31:0] $end
$var wire 32 ; PC_Plus_4 [31:0] $end
$var wire 32 < PC [31:0] $end
$var wire 32 = Mux_out [31:0] $end
$var wire 1 > MemtoReg $end
$var wire 1 ? MemWrite $end
$var wire 1 @ MemRead $end
$var wire 4 A Control_out [3:0] $end
$var wire 1 B Branch $end
$var wire 32 C ALU_Result [31:0] $end
$var wire 1 D ALUSrc $end
$scope module ALU $end
$var wire 4 E Control_in [3:0] $end
$var wire 32 F B [31:0] $end
$var wire 32 G A [31:0] $end
$var reg 32 H ALU_Result [31:0] $end
$var reg 1 * zero $end
$upscope $end
$scope module ALUC $end
$var wire 3 I fun3 [2:0] $end
$var wire 7 J fun7 [6:0] $end
$var wire 7 K opcode [6:0] $end
$var reg 4 L Control_out [3:0] $end
$upscope $end
$scope module ALU_mux $end
$var wire 1 D sel $end
$var wire 32 M Mux_out [31:0] $end
$var wire 32 N B [31:0] $end
$var wire 32 O A [31:0] $end
$upscope $end
$scope module Adder $end
$var wire 32 P in_2 [31:0] $end
$var wire 32 Q in_1 [31:0] $end
$var wire 32 R Sum_out [31:0] $end
$upscope $end
$scope module And $end
$var wire 1 2 and_out $end
$var wire 1 * zero $end
$var wire 1 B branch $end
$upscope $end
$scope module Control $end
$var wire 7 S opcode [6:0] $end
$var reg 1 D ALUSrc $end
$var reg 1 B Branch $end
$var reg 1 @ MemRead $end
$var reg 1 ? MemWrite $end
$var reg 1 > MemtoReg $end
$var reg 1 7 RegWrite $end
$upscope $end
$scope module ImmGen $end
$var wire 7 T opcode [6:0] $end
$var wire 32 U instruction [31:0] $end
$var reg 32 V immExt [31:0] $end
$upscope $end
$scope module InstMem $end
$var wire 32 W InstAddr [31:0] $end
$var wire 1 " clk $end
$var wire 1 ( reset $end
$var wire 32 X read_addresss [31:0] $end
$var wire 32 Y instruction_out [31:0] $end
$upscope $end
$scope module Mem $end
$var wire 32 Z DataAddr [31:0] $end
$var wire 32 [ DataAddrW [31:0] $end
$var wire 1 @ MemRead $end
$var wire 1 ? MemWrite $end
$var wire 1 " clk $end
$var wire 1 ( reset $end
$var wire 32 \ WriteData [31:0] $end
$var wire 32 ] ReadData [31:0] $end
$upscope $end
$scope module Mem_Mux $end
$var wire 32 ^ A3 [31:0] $end
$var wire 32 _ B3 [31:0] $end
$var wire 1 > sel3 $end
$var wire 32 ` Mux_out3 [31:0] $end
$upscope $end
$scope module P $end
$var wire 1 a WE $end
$var wire 1 " clk $end
$var wire 1 ( reset $end
$var wire 32 b PC_in [31:0] $end
$var reg 32 c PC_out [31:0] $end
$upscope $end
$scope module PC_Mux $end
$var wire 32 d B2 [31:0] $end
$var wire 1 2 sel2 $end
$var wire 32 e Mux_out2 [31:0] $end
$var wire 32 f A2 [31:0] $end
$upscope $end
$scope module PCplus $end
$var wire 32 g PC [31:0] $end
$var wire 32 h PC_Plus_4 [31:0] $end
$upscope $end
$scope module Registers $end
$var wire 5 i Rd [4:0] $end
$var wire 1 7 RegWrite $end
$var wire 5 j Rs1 [4:0] $end
$var wire 5 k Rs2 [4:0] $end
$var wire 32 l Write_data [31:0] $end
$var wire 1 " clk $end
$var wire 1 ( reset $end
$var wire 32 m read_data2 [31:0] $end
$var wire 32 n read_data1 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100 n
b100 m
b0 l
b10 k
b1 j
b1000 i
b100 h
b0 g
b100 f
b1000 e
b1000 d
b0 c
b1000 b
1a
b0 `
b0 _
b0 ^
b0 ]
b100 \
b0 [
b0 Z
b1000001000010001100011 Y
b0 X
b0 W
b1000 V
b1000001000010001100011 U
b1100011 T
b1100011 S
b1000 R
b0 Q
b1000 P
b100 O
b1000 N
b100 M
b100 L
b1100011 K
b0 J
b0 I
b0 H
b100 G
b100 F
b100 E
0D
b0 C
1B
b100 A
0@
0?
0>
b100 =
b0 <
b100 ;
b1000 :
b1000 9
b0 8
07
b1 6
b10 5
b1000 4
b0 3
12
b100 1
b100 0
b0 /
b0 .
b1000 -
b1000001000010001100011 ,
b1100011 +
1*
b1110011011010010110111001100111011011000110010100101110011101100110001101100100 )
1(
b11100100110010101100111011100110101111101101111011101010111010000101110011010000110010101111000 '
b111001001100101011001110111001101011111011010010110111000101110011010000110010101111000 &
b110110101100101011011010101111101101111011101010111010000101110011010000110010101111000 %
b1101101011001010110110101011111011010010110111000101110011010000110010101111000 $
0#
0"
0!
$end
#5000
1"
#10000
b1000 [
b1000 3
b1000 `
b1000 l
b1000 C
b1000 H
b1000 Z
b1000 ^
0*
02
b0 A
b0 E
b0 L
17
0B
0!
b100000001100 -
b100000001100 N
b100000001100 P
b100000001100 V
b110011 +
b110011 K
b110011 S
b110011 T
b1101 9
b1101 i
b1000001000011010110011 ,
b1000001000011010110011 U
b1000001000011010110011 Y
b1000 W
b1100 :
b1100 b
b1100 e
b1100 ;
b1100 f
b1100 h
b100000010100 4
b100000010100 R
b100000010100 d
b1000 <
b1000 Q
b1000 X
b1000 c
b1000 g
0"
#15000
1"
#20000
b0 [
b0 3
b0 `
b0 l
b0 C
b0 H
b0 Z
b0 ^
b1 A
b1 E
b1 L
b100000 .
b100000 J
b0 -
b0 N
b0 P
b0 V
b10000 :
b10000 b
b10000 e
b1000000001000001000011010110011 ,
b1000000001000001000011010110011 U
b1000000001000001000011010110011 Y
b1100 W
b10000 ;
b10000 f
b10000 h
b1100 4
b1100 R
b1100 d
b1100 <
b1100 Q
b1100 X
b1100 c
b1100 g
0"
#25000
1"
#30000
b0 C
b0 H
b0 Z
b0 ^
07
1!
b0 =
b0 F
b0 M
b0 0
b0 O
b0 \
b0 m
b0 1
b0 G
b0 n
b0 .
b0 J
b0 5
b0 k
b0 6
b0 j
b0 +
b0 K
b0 S
b0 T
b0 9
b0 i
b10100 :
b10100 b
b10100 e
b0 ,
b0 U
b0 Y
b10000 W
b10100 ;
b10100 f
b10100 h
b10000 4
b10000 R
b10000 d
b10000 <
b10000 Q
b10000 X
b10000 c
b10000 g
0"
#35000
1"
#40000
b11000 :
b11000 b
b11000 e
b10100 W
b11000 ;
b11000 f
b11000 h
b10100 4
b10100 R
b10100 d
b10100 <
b10100 Q
b10100 X
b10100 c
b10100 g
1#
0"
